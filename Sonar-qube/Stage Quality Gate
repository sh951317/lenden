pipeline {
    agent any

    environment {
        // Define SonarQube server name as configured in Jenkins
        SONARQUBE_SERVER = 'SonarQubeServer'
        // Define a timeout for the quality gate check
        QUALITY_GATE_TIMEOUT = 5 // in minutes
    }

    stages {
        stage('Build') {
            steps {
                script {
                    // Replace this with your actual build command
                    sh 'mvn clean install'
                }
            }
        }
        stage('SonarQube Analysis') {
            steps {
                script {
                    // Run SonarQube analysis
                    withSonarQubeEnv(SONARQUBE_SERVER) {
                        sh 'mvn sonar:sonar'
                    }
                }
            }
        }
        stage('Quality Gate') {
            steps {
                script {
                    // Wait for SonarQube quality gate result
                    timeout(time: QUALITY_GATE_TIMEOUT, unit: 'MINUTES') {
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            // Archive any relevant artifacts
            archiveArtifacts artifacts: '**/target/*.jar', allowEmptyArchive: true
            // Optionally, notify on build status
            mail to: 'team@example.com',
                 subject: "Build ${currentBuild.fullDisplayName}",
                 body: "Build ${currentBuild.fullDisplayName} finished with status: ${currentBuild.currentResult}"
        }
        success {
            echo 'Quality gate passed successfully.'
        }
        failure {
            echo 'Quality gate failed.'
        }
    }
}