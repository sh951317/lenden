To check if someone has created a branch in a GitHub repository and to capture that event, you can use a combination of Git commands to inspect branch creation locally, and GitHub webhooks to capture events on the GitHub side.

### Checking Branch Creation Locally

To check if a branch has been created in a repository using Git commands, you can follow these steps:

1. **Fetch All Remote Branches:**
   Make sure your local repository is up-to-date with the remote repository.
   ```sh
   git fetch --all
   ```

2. **List All Branches:**
   List all branches, both local and remote.
   ```sh
   git branch -a
   ```

3. **Check Recent Branches:**
   To check when branches were created, you can use the `git for-each-ref` command.
   ```sh
   git for-each-ref --sort=creatordate --format='%(creatordate:short) %(refname)' refs/heads/
   ```
   This command lists branches sorted by their creation date.

### Capturing Branch Creation Events with GitHub Webhooks

To capture branch creation events, you can set up a GitHub webhook to notify you whenever a new branch is created. Here's how you can do it:

1. **Set Up a GitHub Webhook:**
   - Go to your repository on GitHub.
   - Click on "Settings" > "Webhooks" > "Add webhook".
   - Enter a payload URL where GitHub will send the webhook data. This URL should point to a server that can handle and process the incoming webhook payload.
   - Choose the content type (usually `application/json`).
   - Select "Let me select individual events" and check the "Branch or tag creation" event.
   - Save the webhook.

2. **Handle the Webhook:**
   - Set up a server to listen for incoming webhook payloads. You can use any web framework like Flask for Python, Express for Node.js, etc.
   - Parse the incoming JSON payload to extract event details.

### Example: Setting Up a Webhook Listener in Python (Flask)

Here's a basic example using Flask to capture branch creation events:

```python
from flask import Flask, request, jsonify

app = Flask(__name__)

@app.route('/webhook', methods=['POST'])
def webhook():
    if request.method == 'POST':
        data = request.json
        if data and data['ref_type'] == 'branch':
            branch_name = data['ref']
            repo_name = data['repository']['name']
            print(f"Branch '{branch_name}' created in repository '{repo_name}'")
            # Process the branch creation event
        return jsonify({'status': 'received'})
    else:
        return jsonify({'status': 'invalid method'})

if __name__ == '__main__':
    app.run(port=5000)
```

### Testing Your Webhook

To test your webhook, you can use tools like `ngrok` to expose your local server to the internet and receive webhooks from GitHub.

1. **Install ngrok:**
   - Download and install `ngrok` from https://ngrok.com/.

2. **Run ngrok:**
   ```sh
   ngrok http 5000
   ```

3. **Update Your GitHub Webhook URL:**
   - Update the webhook URL in GitHub to use the `ngrok` URL provided (e.g., `http://<ngrok-id>.ngrok.io/webhook`).

Now, whenever a branch is created in your repository, GitHub will send a payload to your webhook listener, and you can process it accordingly.

### Checking Events Using GitHub API

You can also periodically check for branch creation events using the GitHub API:

```sh
curl -H "Authorization: token YOUR_GITHUB_TOKEN" https://api.github.com/repos/OWNER/REPO/events | jq '.[] | select(.type=="CreateEvent" and .payload.ref_type=="branch")'
```

Replace `YOUR_GITHUB_TOKEN`, `OWNER`, and `REPO` with your GitHub token, the repository owner, and the repository name, respectively.

These methods will help you monitor branch creation in your GitHub repository and capture relevant events.