Here's a basic Jenkinsfile that automates the process of merging a pull request from the `dev` branch to the `master` branch. This example assumes you're using Git and GitHub, and it also includes basic steps for building and testing the code before merging.

```groovy
pipeline {
    agent any

    environment {
        GITHUB_CREDENTIALS = credentials('github-credentials-id') // replace with your credentials ID
        GITHUB_REPO = 'your-repo/your-project'
        DEV_BRANCH = 'dev'
        MASTER_BRANCH = 'master'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: "${env.DEV_BRANCH}", credentialsId: "${env.GITHUB_CREDENTIALS}", url: "https://github.com/${env.GITHUB_REPO}.git"
            }
        }

        stage('Build') {
            steps {
                sh './build.sh' // replace with your build command
            }
        }

        stage('Test') {
            steps {
                sh './test.sh' // replace with your test command
            }
        }

        stage('Merge to Master') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: "${env.GITHUB_CREDENTIALS}", usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                        sh """
                            git config --global user.email "jenkins@example.com"
                            git config --global user.name "Jenkins"
                            git checkout ${env.MASTER_BRANCH}
                            git merge ${env.DEV_BRANCH}
                            git push https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/${env.GITHUB_REPO}.git ${env.MASTER_BRANCH}
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
```

### Explanation:
1. **Environment Variables**: These store information like credentials and branch names.
2. **Checkout**: Checks out the `dev` branch.
3. **Build**: Runs your build script.
4. **Test**: Runs your test script.
5. **Merge to Master**: Merges the `dev` branch into the `master` branch and pushes the changes back to GitHub.
6. **Post Actions**: Cleans up the workspace after the job runs.

### Requirements:
- Ensure you have Jenkins configured with the necessary GitHub credentials.
- Replace `github-credentials-id` with your actual Jenkins credentials ID.
- Replace `your-repo/your-project` with your actual GitHub repository.
- Modify the build and test steps to match your project's requirements. 

This Jenkinsfile assumes a basic workflow. You might need to add more stages or steps depending on your specific requirements.