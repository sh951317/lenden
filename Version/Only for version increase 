pipeline {
    agent any

    environment {
        // Define environment variables
        CURRENT_VERSION = "1.0.01"
        TARGET_VERSION = "1.0.0" // Set the initial target version
        VERSION_INCREMENT = 0.01 // Define how much to increment the version
    }

    stages {
        stage('Read Version') {
            steps {
                script {
                    // Read the current version
                    echo "Current Version: ${env.CURRENT_VERSION}"
                }
            }
        }

        stage('Increment Version') {
            steps {
                script {
                    def versionParts = env.CURRENT_VERSION.tokenize('.')
                    def major = versionParts[0].toInteger()
                    def minor = versionParts[1].toInteger()

                    // Increment the minor version
                    minor += 1

                    // Update the TARGET_VERSION with new values
                    env.TARGET_VERSION = "${major}.${String.format('%02d', minor)}"

                    // Ensure the version does not exceed 1.0.2
                    if (env.TARGET_VERSION == "1.0.03") {
                        env.TARGET_VERSION = "1.0.02"
                    }

                    echo "New Version: ${env.TARGET_VERSION}"
                }
            }
        }

        stage('Commit and Tag') {
            steps {
                sh '''
                # Assuming git is configured and the Jenkins node has access
                git config user.email "you@example.com"
                git config user.name "Your Name"
                
                # Checkout branch and pull latest changes
                git checkout -b version-update
                git pull origin version-update

                # Update version in a file if needed (e.g., a version.txt or similar file)
                echo "${TARGET_VERSION}" > version.txt

                # Commit and push changes
                git add version.txt
                git commit -m "Bump version to ${TARGET_VERSION}"
                git tag -a "v${TARGET_VERSION}" -m "Version ${TARGET_VERSION}"
                git push origin version-update
                git push origin "v${TARGET_VERSION}"
                '''
            }
        }
    }
}